diff --git a/src/end_entity.rs b/src/end_entity.rs
index cfe9ef1..8fd7e84 100644
--- a/src/end_entity.rs
+++ b/src/end_entity.rs
@@ -239,4 +239,40 @@ impl<'a> EndEntityCert<'a> {
             untrusted::Input::from(signature),
         )
     }
+
+    /// Verifies that the end-entity certificate is valid for use by cert chain
+    ///
+    /// `required_eku` is the Certificate Extended Key Usage Oid in bytes.
+    /// If the certificate is not valid for `required_eku` then this
+    /// fails with `Error::CertNotValidForName`.
+    /// `supported_sig_algs` is the list of signature algorithms that are
+    /// trusted for use in certificate signatures; the end-entity certificate's
+    /// public key is not validated against this list. `trust_anchors` is the
+    /// list of root CAs to trust. `intermediate_certs` is the sequence of
+    /// intermediate certificates that the client sent in the TLS handshake.
+    /// `cert` is the purported end-entity certificate of the client. `time` is
+    /// the time for which the validation is effective (usually the current
+    /// time).
+    ///
+    pub fn verify_cert_chain_with_eku(
+        &self,
+        required_eku: &'static [u8],
+        supported_sig_algs: &[&SignatureAlgorithm],
+        trust_anchors: &[crate::TrustAnchor],
+        intermediate_certs: &[&[u8]],
+        time: Time,
+    ) -> Result<(), ErrorExt> {
+        let eku = verify_cert::KeyPurposeId {
+            oid_value: untrusted::Input::from(required_eku),
+        };
+
+        crate::verify_cert::build_chain(
+            eku,
+            supported_sig_algs,
+            trust_anchors,
+            intermediate_certs,
+            &self.inner,
+            time,
+        )
+    }
 }
diff --git a/src/verify_cert.rs b/src/verify_cert.rs
index fe7ef9d..139f307 100644
--- a/src/verify_cert.rs
+++ b/src/verify_cert.rs
@@ -306,7 +306,7 @@ fn check_basic_constraints(
 
 #[derive(Clone, Copy)]
 pub struct KeyPurposeId {
-    oid_value: untrusted::Input<'static>,
+    pub(crate) oid_value: untrusted::Input<'static>,
 }
 
 // id-pkix            OBJECT IDENTIFIER ::= { 1 3 6 1 5 5 7 }
